# Production-Ready Docker Installation and Setup Guide

This guide provides step-by-step instructions for installing Docker and setting up a production-ready environment. It is designed to be a **reference document** whenever you need to deploy Docker in a reliable and secure way.

---

## 1. System Requirements

### Recommended Hardware
- **CPU**: 2+ cores (64-bit)
- **RAM**: Minimum 4 GB (8 GB for production)
- **Storage**: SSD preferred, 20 GB+ free space

### Supported Operating Systems
- Ubuntu 20.04 / 22.04 (Recommended for production)
- Debian 11+
- CentOS 7/8 / RHEL 8+
- Windows Server 2019+ (via WSL2 for Linux containers)
- macOS (for development only)

---

## 2. Install Docker (Linux)

### Step 1: Uninstall Old Versions
```bash
sudo apt-get remove docker docker-engine docker.io containerd runc
```

### Step 2: Install Required Packages
```bash
sudo apt-get update
sudo apt-get install -y     ca-certificates     curl     gnupg     lsb-release
```

### Step 3: Add Dockerâ€™s Official GPG Key
```bash
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
```

### Step 4: Set up the Stable Repository
```bash
echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu   $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
```

### Step 5: Install Docker Engine, CLI, and Compose
```bash
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```

### Step 6: Verify Installation
```bash
docker --version
docker compose version
```

---

## 3. Post-Installation Steps

### Run Docker as a Non-Root User
```bash
sudo usermod -aG docker $USER
newgrp docker
```

### Enable Docker to Start on Boot
```bash
sudo systemctl enable docker
```

---

## 4. Production-Ready Configuration

### 4.1 Enable Docker Remote API (Optional for Orchestration)
```bash
sudo mkdir -p /etc/systemd/system/docker.service.d
cat <<EOF | sudo tee /etc/systemd/system/docker.service.d/override.conf
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375
EOF

sudo systemctl daemon-reload
sudo systemctl restart docker
```

> **Security Note**: Use TLS certificates to secure the API in production.

### 4.2 Configure Logging
Edit `/etc/docker/daemon.json`:
```json
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  }
}
```

Restart Docker:
```bash
sudo systemctl restart docker
```

### 4.3 Setup Persistent Storage
Use Docker volumes for data persistence:
```bash
docker volume create my_data_volume
docker run -d --name myapp -v my_data_volume:/var/lib/mydata myimage:latest
```

### 4.4 Enable Docker Compose for Multi-Container Apps
Example `docker-compose.yml`:
```yaml
version: "3.8"
services:
  web:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./html:/usr/share/nginx/html
    restart: always
```

---

## 5. Security Best Practices
- Run containers with **non-root users**.
- Regularly update Docker and images.
- Use **private container registries** for sensitive apps.
- Scan images for vulnerabilities:
```bash
docker scan myimage:latest
```
- Enable firewall rules to limit access.

---

## 6. Monitoring & Maintenance

### 6.1 Monitor Docker Resources
```bash
docker stats
```

### 6.2 Cleanup Unused Resources
```bash
docker system prune -a
```

### 6.3 Backup Volumes
```bash
docker run --rm -v my_data_volume:/data -v $(pwd):/backup busybox tar czf /backup/backup.tar.gz /data
```

---

## 7. Uninstall Docker (If Needed)
```bash
sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo rm -rf /var/lib/docker
```

---
